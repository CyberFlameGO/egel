/*
 * Hailstone numbers are a mathematical mystery. The following
 * function f(1) = 1, f(x) = x/2 iff x is even, f(x) = x*3 + 1
 * otherwise, has been proven to evaluate to 1 for an absurd amount of
 * numbers, but no proof of that property is known.
 *
 * The following program is taken from a programming contest.
 * 0. show in how many step hailstone(27) reduces to 1.
 * 1. show the first 4, and last 4, numbers of that sequence.
 * 2. determine the number with the longest path below 100.000.
 *
 * This program takes a long while to terminate.
 *
 * see: https://en.wikipedia.org/wiki/Collatz_conjecture
 */

import "prelude.eg"

namespace Hailstone (

    using System
    using List

    def even = [ N -> (N%2) == 0 ]

    def hailstone =
        [ 1 -> {1}
        | N -> if even N then cons N (hailstone (N/2))
               else cons N (hailstone (N * 3 + 1)) ]

    def hailpair =
        [ N -> (N, length (hailstone N)) ]

    def hailmax =
        [ (N, NMAX), (M, MMAX) -> if (NMAX < MMAX) then (M, MMAX) else (N, NMAX) ]

    def largest =
        [ 1 -> (1, 1)
        | N ->
            let M0 = hailpair N in
            let M1 = largest (N - 1) in
                hailmax M0 M1 ]
)

using System
using List
using Hailstone

def task0 = let H27 = hailstone 27 in length H27

def task1 = 
    let H27 = hailstone 27 in
    let L   = length H27 in
        (take 4 H27, drop (L - 4) H27)

def task2 = largest 100000

def main = (task0, task1, task2)

