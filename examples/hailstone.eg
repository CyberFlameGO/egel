

namespace System (
)

namespace List (
    using System

    def length =
        [ nil -> 0 | cons X XX -> 1 + (length XX) ]

    def take =
        [ 0, XX -> nil
        | N, cons X XX -> cons X (take (N-1) XX) ]

    def drop =
        [ 0, XX -> XX
        | N, cons X XX -> drop (N-1) XX ]

)

namespace Hailstone (

    using System
    using List

    def even = [ N -> (N/2) == ((N+1)/2) ]

    def hailstone =
        [ 1 -> {1}
        | N -> if even N then cons N (hailstone (N/2))
               else cons N (hailstone (N * 3 + 1)) ]

    def hailpair =
        [ N -> (N, length (hailstone N)) ]

    def hailmax =
        [ (N, NMAX), (M, MMAX) -> if (NMAX < MMAX) then (M, MMAX) else (N, NMAX) ]

    def largest =
        [ 1 -> (1, 1)
        | N ->
            M0 = hailpair N;
            M1 = largest (N-1);
                hailmax M0 M1 ]
)

using System
using List
using Hailstone

def task0 = H27 = hailstone 27; length H27

def task1 = 
    H27 = hailstone 27;
    L   = length H27;
        (take 4 H27, drop (L-4) H27)

def task3 = largest 100000

def main = (task0, task1, task3)

