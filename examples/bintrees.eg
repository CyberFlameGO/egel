# The binary trees benchmark. Allocate lots and
# lots of small and big binary trees.
#
# This 'standard' micro benchmark runs in about
# one and half hour on my laptop. That in
# comparison to OCaml and GHC which run in 
# about 10 and 25 seconds, respectively. But
# with employing four cores.
#
# The Computer Language Benchmarks Game
# http://benchmarksgame.alioth.debian.org/
#
#  user$ time egel bintrees.eg 21
#  stretch tree of depth 22	 check: 8388607
#  2097152	trees of depth 4	 check: 65011712
#  524288	trees of depth 6	 check: 66584576
#  131072	trees of depth 8	 check: 66977792
#  32768	trees of depth 10	 check: 67076096
#  8192	trees of depth 12	 check: 67100672
#  2048	trees of depth 14	 check: 67106816
#  512	trees of depth 16	 check: 67108352
#  128	trees of depth 18	 check: 67108736
#  32	trees of depth 20	 check: 67108832
#  long lived tree of depth 21	 check: 4194303
#
#  real	91m12.224s
#  user	90m59.900s
#  sys	0m0.797s

import "prelude.eg"
import "io.ego"

using System
using List
using IO

data node, leaf

def make =
    [ 0 -> leaf
    | N -> node (make (N - 1)) (make (N - 1)) ]

def check =
    [ (node L R) -> 1 + (check L) + (check R)
    | T          -> 1 ]

def minN = 4

def max =
    [ X Y -> if X < Y then Y else X ]

def make_stretch =
    [ MAXN ->
        let STRETCHN = MAXN + 1 in
        let C = check (make STRETCHN) in
            print "stretch tree of depth " STRETCHN "\t check: " C "\n" ]

def sum_trees =
    [ D 0 T -> T
    | D N T -> let A = check (make D) in sum_trees D (N - 1) (T + A) ]

def make_trees =
    [ D M ->
        let N = 1 << (M - D + minN) in
        if D <= M then 
            # let _ = print "testing: " N " trees of depth " D "\n" in
            let CHECK = sum_trees D N 0 in
            cons (N, D, CHECK) (make_trees (D+2) M)
        else nil ]

def print_trees =
    [ (cons (N, D, CHECK) TT) ->
        print N "\ttrees of depth " D "\t check: " CHECK "\n";
        print_trees TT
    | _ -> nop ]

def main =
    let N = [ X::text -> toint X | X -> throw "bintrees <arg>" ] (arg 2) in
    let MAXN     = max (minN + 2) N in
    let _ = make_stretch MAXN in
    let TT = make_trees minN MAXN in
    let _ = print_trees TT in
    let LONG = make MAXN in
        print "long lived tree of depth " MAXN "\t check: " (check LONG) "\n" 

