/**
 * In computability theory, the Ackermann function, named after 
 * Wilhelm Ackermann, is one of the simplest and earliest-discovered
 * examples of a total computable function that is not primitive
 * recursive. All primitive recursive functions are total and
 * computable, but the Ackermann function illustrates that not all
 * total computable functions are primitive recursive.
 * -- Wikipedia, the free encyclopedia
 *    https://en.wikipedia.org/wiki/Ackermann_function
 *
 * This function grows rapidly, even for small inputs.
 */

using System

def ackermann =
    [ 0 N -> N + 1
    | M 0 -> ackermann (M - 1) 1
    | M N -> ackermann (M - 1) (ackermann M (N - 1)) ]

def main = ackermann 3 4
