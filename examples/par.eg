# Egel's par construct.
#
# 'par f g' evaluates 'f none' and 'g none' concurrently and
# returns a tuple with the fully reduced terms.
# 
# The par construct is implemented simplistically with c++ 
# native threads and is mostly there to showcase that 
# parallel rewriting is possible on the acyclic graph
# representation.
#
# 'par' is somewhat convenient for trivial programs but I
# imagine you would want other stuff for high-performance 
# code.
#
# When an exception is thrown in a thread its result is
# simply returned.

import "prelude.eg"

namespace Fibonnaci (
  using System

  def fib =
    [ 0 -> 0
    | 1 -> 1
    | N -> fib (N- 2) + fib (N- 1) ]

  def pfib = 
    [ 0 -> 0 
    | 1 -> 1 
    | N -> [ (N0, N1) -> N0 + N1 ] (par [_ -> pfib (N - 1) ] [_ -> pfib (N - 2)]) ]

)

using Fibonnaci
using System

def main = pfib 15
