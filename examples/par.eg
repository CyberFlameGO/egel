/*
 * Egel's par construct.
 *
 * 'par f g' evaluates 'f nop' and 'g nop' concurrently and
 * returns a tuple with the fully reduced terms.
 * 
 * The par construct is implemented simplistically with c++ 
 * native threads and is mostly there to show case that 
 * concurrent rewriting is possible on the acyclic graph
 * representation.
 *
 * 'par' is somewhat convenient for trivial programs but I
 * imagine you would want other stuff for high-performance 
 * code.
 *
 * When an exception is thrown in a thread its result is
 * simply returned.
 */

import "prelude.eg"

namespace Fibonnaci (
  using System

  def fib =
    [ 0 -> 0
    | 1 -> 1
    | N -> fib (N- 2) + fib (N- 1) ]

  def pfib = 
    [ 0 -> 0 
    | 1 -> 1 
    | X -> [ (F0, F1) -> F0 + F1 ] (par [Y -> pfib (X - 1) ] [Z-> pfib (X - 2)]) ]

)

using Fibonnaci
using System

def main = pfib 10
