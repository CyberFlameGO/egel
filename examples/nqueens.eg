/**
 * The N-Queens problem as translated from Haskell to Egel.
 *
 * I only have a rough idea how the following program computes its
 * result. This example shows that it often should be possible to copy
 * a simple Haskell program verbatim and have it run in egel.
 *
 * This program takes a mediocre time to run, mostly because it 
 * cannot exploit lazy evaluation which is what the Haskell program
 * is optimized for.
 **/ 

import "prelude.eg"
/*
    Taken from Haskell code.

    queenPuzzle :: Int -> Int -> [[Int]]
    queenPuzzle nRows nCols
      | nRows <= 0 = [[]]
      | otherwise =
        foldr
          (\solution a ->
              a ++
              foldr
                (\iCol b ->
                    if safe (nRows - 1) iCol solution
                      then b ++ [solution ++ [iCol]]
                      else b)
                []
                [1 .. nCols])
          []
          (queenPuzzle (nRows - 1) nCols)
      where
        safe iRow iCol solution =
          True `notElem`
          zipWith
            (\sc sr ->
                (iCol == sc) || (sc + sr == iCol + iRow) || (sc - sr == iCol - iRow))
            solution
            [0 .. iRow - 1]
*/
 
namespace NQueens (

    using System
    using List

    def nqueens =
        [ 0, NCOLS     -> {{}}
        | NROWS, NCOLS ->
            foldr
              [ SOLUTION, A ->
                  A ++
                  (foldr
                    [ICOL, B ->
                        if safe (NROWS - 1) ICOL SOLUTION
                          then B ++ ({SOLUTION ++ {ICOL}})
                          else B]
                    nil
                    (fromto 1 NCOLS)) ]
            nil
            (nqueens (NROWS - 1) NCOLS) ]

    def safe =
        [ IROW, ICOL, SOLUTION ->
            notelem true
             (zipwith
                [SC, SR ->
                   or (ICOL == SC) 
                  (or (SC + SR == ICOL + IROW) 
                      (SC - SR == ICOL - IROW))]
                SOLUTION
                (fromto 0 (IROW - 1))) ]
)

using List
using NQueens

def main = length (nqueens 8 8)

