/*
 * There are several manners in which you can try to emulate object
 * orientation (OO) in Egel. This is one manner.
 *
 * An object is a record of mutable fields.
 *
 * This is implemented pretty wastefully at the moment, an object
 * is syntactic sugar for a data record which holds named fields.
 * Lookup is O(c*n) with n the number of fields and c a large 
 * constant.
 *
 * That should become better once the runtime is overhauled.
 *
 * There are two ways of supporting mutable objects: the referential
 * transparant manner where on every update the object is
 * copied and returned, and the destructive manner -which
 * doesn't go well with Egel's term semantics- where a field
 * is just overwritten. For the moment, I opted for the latter
 * unsafe manner, you can create cyclic structures but you 
 * shouldn't.
 *
 * Objects are also not thread safe.
 */
import "prelude.eg"

using OO
using System

// examples of a box and a circle class.
class box W H (
    data width, W
    data height, H

    def resize =
        [ SELF, W, H ->
             let Z = set width W SELF in 
                set height H SELF ]

    def area =
        [ SELF ->
            ((get width SELF) * (get height SELF)) ]
)

class circle R (
    data radius, R

    def area =
        [ SELF -> 
            let RR = tofloat(get radius SELF) in
                R*R*Math.pi ]
)
    
def main =
    let B = box 4 5 in
    let AREA0 = B @@ area in
    let N = (B @@ resize) 2 3 in
    let AREA1 = B @@ area in
        (AREA0, AREA1)

