# Egel's process abstraction.
#
# For the moment, I only implemented a number of simplistic
# combinators.
#
# `proc f`      - create a process object from f
# `send m p`    - send message m to process p
# `recv p`      - receive a message from process p (blocks)
# `halt p`      - halt process p

import "prelude.eg"
import "io.ego"

using System
using IO

def sum = [ X Y -> let Z = X + Y in (Z, sum Z) ]

val p = proc (sum 0)

def main = 
    send 2 p;
    send 3 p;
    print "received: " (recv p) "\n";
    print "received: " (recv p) "\n";
    halt p
