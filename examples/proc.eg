# Egel's process abstraction.
#
# For the moment, I only implemented a number of simplistic
# combinators.
#
# A procces is a mealy machine which takes an input and
# and results in an output and a continuation.
#
# `proc f`      - create a process object from f
# `send p m`    - send message m to process p
# `recv p`      - receive a message from process p (blocks)
# `halt p`      - halt process p

import "prelude.eg"

using System

def sum = [ X Y -> let Z = X + Y in (Z, sum Z) ]

val p = proc (sum 0)

def main = 
    send p 2;
    send p 3;
    print "received: " (recv p) "\n";
    print "received: " (recv p) "\n";
    halt p
