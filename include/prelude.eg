namespace System (

    ## System::or p q - boolean or
    def or =
        [ false false -> false
        | X Y         -> true ]

    ## System::and p q - boolean and
    def and =
        [ true true    -> true
        | X Y          -> false ]

    ## System::not p q - boolean not
    def not =
        [ true  -> false
        | X     -> true ]

    ## System::. f g - function composition
    def . =
        [ F G X -> F (G X) ]

    ## System::flip f x y - flip two arguments
    def flip = [ F X Y -> F Y X ]

    ## System::uncurry f (x, y) - uncurry arguments
    def uncurry = [ F (X,Y) -> F X Y ]

    ## System::fst (x, y) - proj0 on pair
    def fst = [ (X,Y) -> X ]

    ## System::snd (x, y) - proj1 on pair
    def snd = [ (X,Y) -> Y ]

    def @@ =
        [ SELF NAME -> (get NAME SELF) SELF ]

)

namespace Opt (
    data just
    data nothing
)

namespace List (

    using System

    ## List::length l - length of a list
    def length =
        [ nil -> 0
        | (cons X XX) -> 1 + (length XX) ]

    ## List::foldl f z l - left fold on a list
    def foldl =
        [ F Z nil -> Z
        | F Z (cons X XX) -> foldl F (F Z X) XX ]

    ## List::foldr f z l - right fold on a list
    def foldr =
        [ F Z nil -> Z
        | F Z (cons X XX) -> F X (foldr F Z XX) ]

    ## List::head l - head of a list
    def head =
        [ (cons X XX) -> X ]

    ## List::tail l - tail of a list
    def tail =
        [ (cons X XX) -> XX ]

    ## List::++ l0 l1 - concatenation of two lists
    def ++ =
        [ nil YY -> YY
        | (cons X XX) YY -> cons X (XX ++ YY) ]

    ## List::map f l - map a function over a list
    def map =
        [ F nil -> nil
        | F (cons X XX) -> let Y = F X in cons Y (map F XX) ]

    ## List::reverse l - reverse a list
    def reverse = 
       foldl (flip cons) nil

    ## List::block n - list of number from 0 to n exclusive
    def block =
        [ 0 -> nil
        | N -> cons (N - 1) (block (N - 1)) ]

    ## List::nth n l - nth element of a list
    def nth =
        [ 0 (cons X XX) -> X
        | N (cons X XX) -> nth (N - 1) XX ]

    ## List::insert n x l - insert an element at given position
    def insert =
        [ 0 X (cons Y YY) -> cons X YY
        | I X (cons Y YY) -> cons Y (insert (I - 1) X YY) ]

    ## List::take n l - take the first n elements of a list
    def take =
        [ 0 XX -> nil
        | N (cons X XX) -> cons X (take (N - 1) XX) ]

    ## List::drop n l - drop the first n elements of a list
    def drop =
        [ 0 XX -> XX
        | N (cons X XX) -> drop (N - 1) XX ]

    ## List::from_to min max - list of numbers for min to max (exclusive)
    def from_to =
        [ X Y -> 
            if X <= Y then cons X (from_to (X+1) Y)
            else nil ]

    ## List::filter p l - filter all members from a list which satisfy a predicate
    def filter =
        [ P nil -> nil
        | P (cons X XX) -> if P X then cons X (filter P XX) 
                                 else filter P XX ]

    ## List::flatten ll - flatten a list of lists to a list
    def flatten =
        [ nil                   -> nil
        | (cons nil YY)         -> flatten YY
        | (cons (cons X XX) YY) -> cons X (flatten (cons XX YY)) ]

    ## List::zip l0 l1 - zip to lists to a list of pairs
    def zip =
        [ (cons X XX) (cons Y YY)  -> cons (X,Y) (zip XX YY)
        | XX YY                    -> nil ]

    ## List::zip_with f l0 l1 - apply a function pairwise to members of two lists
    def zip_with =
        [ Z (cons X XX) (cons Y YY) -> cons (Z X Y) (zip_with Z XX YY)
        | Z XX YY               -> nil ]

    ## List::transpose ll - transpose a list of lists
    def transpose =
        [ (cons nil XX) -> nil
        | XX            -> cons (map head XX) (transpose (map tail XX)) ]


    ## List::any p l - checks whether any element of a list satisfies a predicate
    def any =
        [ P nil          -> false
        | P (cons B BB)  -> if P B then true else any P BB ]

    ## List::all p l - checks whether all elements of a list  satisfies a predicate
    def all =
        [ P nil          -> true
        | P (cons B BB)  -> if P B then all P BB else false ]

    ## List::elem x l - membership test
    def elem =
        [ X -> any ((==) X) ]

    ## List::not_elem x l - inverse membership test
    def not_elem =
        [ X -> all ((/=) X) ]

    ## List::union x l - union of two lists (nË†2 complexity)
    def union =
        [ nil YY            -> YY
        | (cons X XX) YY    -> if elem X YY then union XX YY else cons X (union XX YY) ]

    ## List::insert_everywhere x l - insert a member in every position of a list
    def insert_everywhere =
        [ X nil -> {{X}}
        | X (cons Y YY) -> cons (cons X (cons Y YY)) (map (cons Y) (insert_everywhere X YY)) ]

    ## List::concat_map f l - concat map
    def concat_map =
        [ F -> foldr ((++) . F) nil ]

    ## List::permutations l - all permutations of a list
    def permutations =
        foldr (concat_map . insert_everywhere) {{}}

    def merge =
        [ XX nil -> XX
        | nil YY -> YY
        | (cons X XX) (cons Y YY) ->
                if X <= Y then cons X (merge XX (cons Y YY))
                else cons Y (merge (cons X XX) YY) ]

    ## List::sort l - merge sort 
    def sort =
        [ nil -> nil | (cons X nil) -> cons X nil
        | XX -> let L = length XX in
                merge (sort (take (L/2) XX)) (sort (drop (L/2) XX)) ]

)
