# combinators to make dict more useful

import "dict.ego"
import "prelude.eg"
import "generator.eg"

namespace System ( # dict lives in the System space

    using List
 
    def dict_from_list =
        foldl [D (K,V) -> dict_set D K V] dict

    def dict_to_list =
        [ D -> foldl [LL K -> cons (K, dict_get D K) LL] nil (dict_keys D) ]

    def dict_nth =
        [ V D K -> if dict_has D K then dict_get D K else V ]

    def dict_copy =
        dict_from_list . dict_to_list 

    def dict_update =
        [ D K V -> if dict_has D K then dict_set D K V else D ]

    def dict_lazy_update =
        [ D K VF -> if dict_has D K then dict_set D K (VF none) else D ]

    def dict_map =
        [ F D -> foldl [D K -> dict_set D K (F (dict_get D K))] D (dict_keys D) ]

    def dict_union =
        [ D0 D1 -> dict_from_list ((dict_to_list D0) ++ (dict_to_list D1)) ]
)
