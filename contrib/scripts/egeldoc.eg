#!/usr/bin/env egel
# Documentation generator for the Egel language.
#
# A quick and dirty script to dump all builtin combinators.

import "prelude.eg"
import "regex.ego"
import "fs.ego"
import "io.ego"

using System

def fix = [ F -> F [ X -> (fix F) X ] ]

## usage
def print_usage =
    print  "usage: egeldoc\n"

def test_file =
    [ FN::text -> OS:exists FN
    | _        -> false ]

def read_file =
    [ FN ->
        let CHAN = OS:open FN in
        let LINES = fix [ F CHAN -> let LINE = OS:read_line CHAN in
                      if OS:eof CHAN then {} else cons LINE (F CHAN) ] CHAN 
        in OS:close CHAN; LINES ]

## .cpp/.hpp handling
val cc_regex_comment = Regex:compile "//(.*)"

def cc_strip_lines =
    [ {} -> {} | (cons L LL) -> 
        [ {L} -> cons L (cc_strip_lines LL) | E -> cc_strip_lines LL ]
            (Regex:group cc_regex_comment L) ]

def cc_strip =
    [ FN LL ->
        if (String:ends_with ".cpp" FN) || (String:ends_with ".hpp" FN)
        then cc_strip_lines LL else LL ]

## strip comments
val eg_regex_comment = Regex:compile "##(.*)"

def eg_strip_comments =
    [ {} -> {} | (cons L LL) -> 
        [ {L} -> cons L (eg_strip_comments LL) | E -> eg_strip_comments LL ]
            (Regex:group eg_regex_comment L) ]

data file, space, comb

## spaces
val eg_regex_space = 
    Regex:compile " *namespace (.*) - (.*)"

def eg_spacify =
    [ {} -> {} | (cons L LL) ->
        [ {S, T} -> cons (space S T) (eg_spacify LL) 
        | E -> cons L (eg_spacify LL) ]
            (Regex:group eg_regex_space L) ]

## combinators
val eg_regex_combinator = 
    Regex:compile " *(.*):([^ ]*) (.*)- (.*)"

def eg_combify =
    [ {} -> {} 
    | (cons (L::text) LL) ->
        [ {N, C, AA, T} -> cons (comb N C AA T) (eg_combify LL) 
        | E -> cons L (eg_combify LL) ]
            (Regex:group eg_regex_combinator L)
    | (cons L LL) -> cons L (eg_combify LL) ]

# rendering
def render_lines =
    [ {} -> none
    | (cons (space S C) LL) ->
        print (format "## namespace {} - {}\n" S C); render_lines LL
    | (cons (comb N C AA T) LL) ->
        print (format "`{}:{}` {} - {}\n" N C AA T); render_lines LL
    | (cons L LL) -> render_lines LL ]


def render =
    [ FN LL ->
        print (format "# File: {}\n"  FN);
        render_lines LL ]

# process the files
def files =
    {
        "src/builtin_eval.cpp",
        "src/builtin_math.cpp",
        "src/builtin_process.cpp",
        "src/builtin_string.cpp",
        "src/builtin_system.cpp",
        "src/builtin_thread.cpp",
        "lib/fs/fs.cpp",
        "lib/io/io.cpp", 
        "lib/random/random.cpp", 
        "lib/regex/regex.cpp"
    }

def process =
    [ FN ->
        let LINES = read_file FN in
        let LINES = cc_strip FN LINES in
        let LINES = eg_strip_comments LINES in
        let LINES = eg_spacify LINES in
        let LINES = eg_combify LINES in
            render FN LINES ]

def process_all =
    [ {} -> none
    | (cons FN FNN) -> process FN; process_all FNN ]

## main
def main =
    process_all files
